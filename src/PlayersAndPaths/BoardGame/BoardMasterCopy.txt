
class BoardMaster extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            DiceResult: 4,
            Board: [],
            PlayerPosition: 0,
            Path: [0,1,2,6,10,9,13,14],
        }
    }


    componentDidMount(){
        this.CurrentBoard();
    }
 

    CurrentBoard = () => {
        let Board = this.state.Board
        for (let tile = 0; tile <16; tile ++){
            Board.push(tile)
        }
        return this.currentPlayerPosition(Board)
    }



    currentPath = (Board) => {
        let iPath = this.state.Path
        return Board.map(number =>
            iPath.includes(number)
            ? <Path number={number} />
            : <Tile number={number} />
        )}

    currentPlayerPosition = (Board) => {
        let Position = this.state.PlayerPosition
        return Board.map(number => (
            Position === number
            ? <Piece number={number} />
            : <Tile number={number} />
        ))}
    

    updateCurrentPlayerPosition = (position) => {
        let updateCurrentPlayerPosition = this.state.PlayerPosition + this.state.DiceResult
        this.setState({PlayerPosition : updateCurrentPlayerPosition})    
    }

    handlePieceMovement = () => {
        let PlayerPosition = this.state.PlayerPosition
        let DiceResult = this.state.DiceResult
        let Destination = PlayerPosition + DiceResult
        while (PlayerPosition < Destination){
        return <Piece /> & PlayerPosition ++
        }
    }


// extract only positions of pieces
const posit = [...new Set(players.map(player => player.playerPosition))]
ou
let positions = (players.map(player => player.playerPosition))